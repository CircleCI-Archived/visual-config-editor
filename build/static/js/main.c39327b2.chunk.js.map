{"version":3,"sources":["state/Hooks.tsx","components/atoms/Definition.tsx","components/containers/DefinitionsContainer.tsx","data/ExecutorData.tsx","icons/ExecutorIcon.tsx","components/containers/summaries/ExecutorSummary.tsx","components/containers/inspector/ExecutorInspector.tsx","components/containers/inspector/JobInspector.tsx","icons/JobIcon.tsx","components/containers/summaries/JobSummary.tsx","data/JobData.tsx","components/containers/nodes/JobNode.tsx","data/ConfigData.tsx","components/panes/DefinitionsPane.tsx","components/panes/WorkflowPane.tsx","components/panes/WorkflowsTabbed.tsx","state/Store.tsx","components/containers/CreateNew.tsx","components/panes/InspectorPane.tsx","App.tsx","index.tsx"],"names":["typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","Definition","props","Summary","type","components","summary","inspector","actions","inspect","className","draggable","onDragStart","e","dragTarget","configData","data","node","transform","dataTransfer","setData","JSON","stringify","onClick","mode","dataType","Defintions","items","store","get","triggerClassName","triggerOpenedClassName","transitionTime","trigger","iconComponent","icon","Icon","getIcon","name","plural","map","item","ExecutorData","singular","defaults","image","values","Executor","DockerExecutor","state","definitions","executors","add","defineExecutor","update","updateExecutor","remove","undefineExecutor","applyToNode","nodeData","oldJob","job","Job","steps","viewBox","id","data-name","d","cx","cy","r","resourceClass","handleChange","handleBlur","handleSubmit","onSubmit","onChange","onBlur","value","JobInspector","executor","JobIcon","JobSummary","JobData","undefined","parse","jobs","defineJob","updateJob","undefineJob","component","elements","workflows","selectedWorkflow","setWorkflowElements","updateWorkflowJob","workflowJob","applyToData","element","isNode","onConnect","params","targetJob","find","target","addEdge","animated","style","stroke","parameters","requires","onDragOver","types","includes","preventDefault","onDrop","transfer","getData","componentToType","old","new","isConnectable","position","Position","Left","borderRadius","Right","dataMappings","MacOSExecutor","MachineExecutor","WindowsExecutor","foundType","forEach","mapping","DefintionsPane","generateConfig","WorkflowPane","addWorkflowElement","console","log","workflowNode","connectable","v4","x","clientX","y","clientY","selectNodesOnDrag","nodeTypes","Object","assign","snapToGrid","variant","BackgroundVariant","Lines","gap","color","bgClassName","size","WorkflowsTabbed","addWorkflow","selectWorkflow","onSelect","index","workflow","selectedClassName","Actions","action","payload","inspecting","concat","removeWorkflow","filter","push","removeWorkflowElement","importOrb","unimportOrb","findIndex","defineCommand","undefineCommand","defineParameter","undefineParameter","error","config","Config","defaultExecutor","Store","version","commands","orbs","CreateNew","initialValues","getInspector","InspectorPane","keys","key","App","createStore","split","defaultSize","resizerClassName","minSize","DefinitionsPane","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAGMA,EAAaC,cAENC,EAAkBF,EAAWE,gBAE7BC,GADmBH,EAAWI,iBACdJ,EAAWG,e,OCwBzBE,EA5BI,SAACC,GAClB,IAAMC,EAAUD,EAAME,KAAKC,WAAWC,QAChCC,EAAYT,GAAgB,SAACU,GAAD,OAAaA,EAAQC,WAEvD,OACE,wBAAQC,UAAU,+EAA+EC,UAAU,OACzGC,YAAa,SAACC,GACZ,IAAMT,EAAOF,EAAME,KAEnB,UAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAMU,WAAY,CAAC,IAAD,IAChBC,EAAab,EAAMc,MAEvB,UAAIZ,EAAKa,YAAT,aAAI,EAAWC,aACbH,EAAaX,EAAKa,KAAKC,UAAUH,IAGnCF,EAAEM,aAAaC,QAAQhB,EAAKU,WAAYO,KAAKC,UAAU,CAAElB,MAAM,UAAAA,EAAKa,YAAL,eAAWb,OAAQA,EAAKA,KAAMY,KAAMD,OAGvGQ,QAAS,SAACV,GACRN,EAAU,CAAEiB,KAAM,UAAWR,KAAMd,EAAMc,KAAMS,SAAUvB,EAAME,QAfnE,SAkBE,cAACD,EAAD,CAASa,KAAMd,EAAMc,UC2BZU,EA1CI,SAACxB,GAClB,IAUMyB,EAAQ5B,EAAcG,EAAME,KAAKwB,MAAMC,KACvCpB,EAAUX,GAAgB,SAACU,GAAD,OAAaA,EAAQC,WAErD,OACE,qBAAKC,UAAU,OAAf,SACE,eAAC,IAAD,CAAaoB,iBAAiB,4HAC5BC,uBAAuB,kFAAkFC,eAAgB,GAAIC,QAC3H,sBAAKvB,UAAU,QAAf,UAjBQ,WACd,IAAIwB,EAAgBhC,EAAME,KAAKC,WAAW8B,KAE1C,GAAID,EAAe,CACjB,IAAIE,EAAOF,EAEX,OAAO,cAACE,EAAD,CAAM1B,UAAU,uBAYhB2B,GACD,mBAAG3B,UAAU,cAAb,SACGR,EAAME,KAAKkC,KAAKC,YALzB,iBAWIZ,QAXJ,IAWIA,OAXJ,EAWIA,EAAOa,KAAI,SAACC,GAAD,OACT,qBAAK/B,UAAU,gCAAf,SACE,cAAC,EAAD,CAAYM,KAAMyB,EAAMrC,KAAMF,EAAME,QADcqC,EAAKH,SAI7D,qBAAK5B,UAAU,yEAAf,SACE,wBAAQa,QAAS,kBAAMd,EAAQ,CAAEgB,SAAUvB,EAAME,KAAMoB,KAAM,cAAed,UAAU,kIAAtF,uB,OCFKgC,EA/BN,CACLtC,KAAM,WACNkC,KAAM,CACJK,SAAU,WACVJ,OAAQ,aAEVK,SAAU,CACRN,KAAM,eACNO,MAAO,oBAET3B,UAAW,SAAC4B,GAAD,OAAY,IAAIC,WAASC,eAAeF,EAAOR,KAAMQ,EAAOD,MAAMP,MAAQ,qBACrFV,MAAO,CACLC,IAAK,SAACoB,GAAD,OAAWA,EAAMC,YAAYC,WAClCC,IAAK,SAAC5C,GAAD,OAAaA,EAAQ6C,gBAC1BC,OAAQ,SAAC9C,GAAD,OAAaA,EAAQ+C,gBAC7BC,OAAQ,SAAChD,GAAD,OAAaA,EAAQiD,mBAE/B3C,WAAY,MACZ4C,YAAa,SAAC1C,EAAM2C,GAClB,IAAMC,EAASD,EAASE,IAExB,MAAO,CAAEA,IAAK,IAAIC,MAAIF,EAAOtB,KAAMtB,EAAM4C,EAAOG,SAElD1D,WAAY,CACV8B,KCjCe,SAACjC,GAAD,OACjB,qBAAK8D,QAAQ,YAAYtD,UAAWR,EAAMQ,UAA1C,SACI,oBAAGuD,GAAG,UAAUC,YAAU,UAA1B,UACI,sBAAMC,EAAE,kKACR,sBAAMA,EAAE,kKACR,sBAAMA,EAAE,kKACR,wBAAQC,GAAG,QAAQC,GAAG,KAAKC,EAAE,MAC7B,wBAAQF,GAAG,QAAQC,GAAG,KAAKC,EAAE,MAC7B,wBAAQF,GAAG,QAAQC,GAAG,KAAKC,EAAE,MAC7B,sBAAMH,EAAE,kDACR,sBAAMA,EAAE,kDACR,sBAAMA,EAAE,wDDuBd7D,QElCsE,SAACJ,GAC3E,OACE,gCACGA,EAAMc,KAAKsB,KADd,IACqBpC,EAAMc,KAAKuD,kBFgC9BhE,UG/BoB,SAAC2C,GAAD,OAAkC,YAKX,IAJ/CJ,EAI8C,EAJ9CA,OACA0B,EAG8C,EAH9CA,aACAC,EAE8C,EAF9CA,WACAC,EAC8C,EAD9CA,aAIA,OACE,uBAAMC,SAAUD,EAAhB,UACE,uBACEpC,KAAK,OACLsC,SAAUJ,EACVK,OAAQJ,EACRK,MAAOhC,EAAOR,OAEhB,wBAAQlC,KAAK,SAASM,UAAU,qDAAhC,2BCgBSqE,EAjCM,SAAC7B,GAAD,OAAkC,YAKlB,IAAD,EAJlCJ,EAIkC,EAJlCA,OACA0B,EAGkC,EAHlCA,aACAC,EAEkC,EAFlCA,WACAC,EACkC,EADlCA,aAGA,OACE,uBAAMC,SAAUD,EAAhB,UACE,uBACEpC,KAAK,OACLsC,SAAUJ,EACVK,OAAQJ,EACRK,MAAOhC,EAAOR,OAEhB,uBACA,yBACEA,KAAK,WACLwC,MAAOhC,EAAOkC,SACdJ,SAAUJ,EACVK,OAAQJ,EAJV,UAKE,wBAAQK,MAAO,YAAf,4BAAiC,aALnC,UAMG5B,EAAYC,iBANf,aAMG,EAAuBX,KAAI,SAACwC,GAAD,OAC1B,wBAAQF,MAAOzD,KAAKC,UAAU0D,GAA9B,SAA8DA,EAAS1C,MAAzB0C,EAAS1C,YAG3D,wBAAQlC,KAAK,SAASM,UAAU,qDAAhC,uBCvBSuE,EANC,SAAC/E,GAAD,OACZ,qBAAK8D,QAAQ,YAAYtD,UAAWR,EAAMQ,UAA1C,SACI,sBAAMyD,EAAE,6pCCQDe,EAR4C,SAAChF,GAAW,IAAD,EACpE,OACE,gCACGA,EAAMc,KAAKsB,KADd,cACqBpC,EAAMc,KAAKgE,gBADhC,aACqB,EAAqB1C,S,cCyD/B6C,EAjDN,CACL/E,KAAM,MACNkC,KAAM,CACJK,SAAU,MACVJ,OAAQ,QAEVK,SAAU,CACRN,KAAM,UACN0C,cAAUI,GAEZlE,UAAW,SAAC4B,GACV,OAAO,IAAIgB,MAAIhB,EAAOR,KAAMjB,KAAKgE,MAAMvC,EAAOkC,UAAWlC,EAAOiB,QAElEnC,MAAO,CACLC,IAAK,SAACoB,GACJ,OAAOA,EAAMC,YAAYoC,MAE3BlC,IAAK,SAAC5C,GAAD,OAAaA,EAAQ+E,WAC1BjC,OAAQ,SAAC9C,GAAD,OAAaA,EAAQgF,WAC7BhC,OAAQ,SAAChD,GAAD,OAAaA,EAAQiF,cAE/B3E,WAAY,WACZG,KAAM,CACJb,KAAM,MACNc,UAAW,SAACF,GACV,MAAO,CAAE6C,IAAK7C,IAEhBY,MAAO,GAYP8D,UC5CsE,SAACxF,GAAW,IAAD,EAC/EyF,EAAW5F,GAAc,SAACkD,GAAD,OAAWA,EAAM2C,UAAU3C,EAAM4C,kBAAkBF,YAC5EG,EAAsBhG,GAAgB,SAACU,GAAD,OAAaA,EAAQsF,uBAC3DN,EAAY1F,GAAgB,SAACU,GAAD,OAAaA,EAAQgF,aAEjDO,EAAoB,SAACC,EAA0BC,GAA3B,OACxBN,EAASnD,KAAI,SAAC0D,GAAD,OACXC,YAAOD,IAAYA,EAAQlF,KAAK6C,IAAIvB,MAAQ0D,EAAYnC,IAAIvB,KAA5D,2BACO4D,GADP,IACgBlF,KAAK,2BAAMgF,GAAgBC,KACvCC,MAGFE,EAAY,SAACC,GAAwB,IAAD,EAClCC,EAAS,UAAGX,EAASY,MAAK,SAACL,GAAD,OAAaA,EAAQjC,KAAOoC,EAAOG,iBAApD,aAAG,EAA0DxF,KAE5E8E,EAAoBW,YAAQ,2BAAKJ,GAAN,IAAcK,UAAU,EAAMC,MAAO,CAAEC,OAAQ,UACxEb,EAAkBO,EAAW,CAC3BO,WAAY,CACVC,SAAU,CAAC5G,EAAMc,KAAK6C,IAAIvB,YAKlC,OACE,sBAAK5B,UAAU,mDACbqG,WAAY,SAAClG,GACPA,EAAEM,aAAa6F,MAAMC,SAAS,QAChCpG,EAAEqG,kBAEHC,OAAQ,SAACtG,GACV,GAAIA,EAAEM,aAAa6F,MAAMC,SAAS,OAAQ,CAExC,IAAMG,EAAwC/F,KAAKgE,MAAMxE,EAAEM,aAAakG,QAAQ,QAC1EjH,EAAOkH,EAAgBF,EAAShH,MAEtC,GAAIgH,IAAQ,OAAIhH,QAAJ,IAAIA,OAAJ,EAAIA,EAAMsD,aAAa,CACjC,IAAMuC,EAAc7F,EAAKsD,YAAY0D,EAASpG,KAAMd,EAAMc,MAEtD,QAASiF,GACXT,EAAU,CAAE+B,IAAKrH,EAAMc,KAAK6C,IAAK2D,IAAKvB,EAAYpC,MAGhD,eAAgBoC,GAClBF,EAAkB7F,EAAMc,KAAMiF,MAnBxC,UAwBE,cAAC,IAAD,CAAQ7F,KAAK,SACXqH,eAAe,EACfrB,UAAWA,EACXsB,SAAUC,IAASC,KAAMjB,MAAO,CAAEkB,aAAc,KAClD,sBAAKnH,UAAU,uBAAf,WACG,UAAAR,EAAMc,KAAK6F,kBAAX,eAAuBvE,OAAQpC,EAAMc,KAAK6C,IAAIvB,KAC/C,oBAAG5B,UAAU,gBAAb,uBACaR,EAAMc,KAAK6C,IAAImB,SAAS1C,KACnC,uBAFF,eAGejB,KAAKC,UAAUpB,EAAMc,KAAK6F,aAAe,aAM1D,cAAC,IAAD,CACEzG,KAAK,SACLsH,SAAUC,IAASG,MACnB1B,UAAWA,EACXqB,eAAe,SDrBnBpH,WAAY,CACV8B,KAAM8C,EACN3E,QAAS4E,EACT3E,UAAWwE,IE5CXgD,EAA8B,CAClC,CACE3H,KAAM,WACNsF,UAAW,CAAC3C,WAASC,eAAgBD,WAASiF,cAAejF,WAASkF,gBAAiBlF,WAASmF,iBAChGzG,SAAUiB,GAEZ,CACEtC,KAAM,MACNsF,UAAW,CAAC5B,OACZrC,SAAU0D,IAIRmC,EAAkB,SAACtG,GACvB,IAAImH,OAAY/C,EAgBhB,OAdA2C,EAAaK,SAAQ,SAACC,GACA,kBAATrH,GAAqBqH,EAAQjI,MAAQY,EAI9CqH,EAAQ3C,UAAU0C,SAAQ,SAAAhI,GACpBY,aAAgBZ,IAClB+H,EAAYE,EAAQ5G,aALxB0G,EAAYE,EAAQ5G,YAYjB0G,GCVMG,EA/BQ,WAIrB,IAAMC,EAAiBzI,GAAgB,SAACU,GAAD,OAAaA,EAAQ+H,kBAE5D,OACE,sBAAK7H,UAAU,sDAAf,UACE,qBAAKA,UAAU,uCAAf,SACE,oBAAIA,UAAU,+FAAd,kCAKF,qBAAKA,UAAU,+BAAf,SACE,qBAAKA,UAAU,yCAAf,SACGqH,EAAavF,KAAI,SAAA6F,GAChB,IAAM5G,EAAW4G,EAAQ5G,SAEzB,OAAQ,cAAC,EAAD,CAAarB,KAAMqB,WAKjC,wBAAQf,UAAU,uFAChBa,QAAS,SAAAV,GAAC,OAAI0H,KADhB,qC,+BCmCSC,EAtCM,SAACtI,GACpB,IAAMyF,EAAW5F,GAAc,SAACkD,GAAD,OAAWA,EAAM2C,UAAU3C,EAAM4C,kBAAkBF,YAC5E8C,EAAqB3I,GAAgB,SAACU,GAAD,OAAaA,EAAQiI,sBAEhE,OACE,qBAAK/H,UAAU,gBAAgBqG,WAAY,SAAClG,GACtCA,EAAEM,aAAa6F,MAAMC,SAAS,aAChCpG,EAAEqG,kBAEHC,OAAQ,SAACtG,GAEV,GAAIA,EAAEM,aAAa6F,MAAMC,SAAS,YAAa,CAC7C,IAAMG,EAAW/F,KAAKgE,MAAMxE,EAAEM,aAAakG,QAAQ,aAInD,GAFAqB,QAAQC,IAAIvB,GAERA,EAAU,CACZ,IAAMwB,EAA0B,CAC9B5H,KAAMoG,EAASpG,KACf6H,aAAa,EACbzI,KAAMgH,EAAShH,KACf6D,GAAI6E,cACJpB,SAAU,CAAEqB,EAAGlI,EAAEmI,QAASC,EAAGpI,EAAEqI,UAGjCT,EAAmBG,MApBzB,SAwBE,cAAC,IAAD,CAAWjD,SAAUA,EAAUjF,UAAWR,EAAMQ,UAAWyI,mBAAmB,EAAOC,UArCrDC,OAAOC,OAAP,MAAAD,OAAM,CAAQ,IAAR,mBAAetB,EAAavF,KAAI,SAACkD,GAC3E,IAAMzE,EAAOyE,EAAUjE,SAASR,KAEhC,GAAIA,EACF,OAAO,eAAGA,EAAKb,KAAOa,EAAKyE,iBAiCmF6D,YAAY,EAAxH,SAEE,cAAC,IAAD,CAAYC,QAASC,IAAkBC,MAAOC,IAAK,IAAKC,MAAM,UAAUlJ,UAAWR,EAAM2J,YAAaC,KAAM,SClBrGC,EAjCS,WACtB,IAAMnE,EAAY7F,GAAc,SAACkD,GAAD,OAAWA,EAAM2C,aAC3CoE,EAAclK,GAAgB,SAACU,GAAD,OAAaA,EAAQwJ,eACnDC,EAAiBnK,GAAgB,SAACU,GAAD,OAAaA,EAAQyJ,kBAE5D,OAAQ,eAAC,IAAD,CAAMvJ,UAAU,uCAAuCwJ,SAAU,SAACC,GAAD,OAAWF,EAAeE,IAA3F,UACN,eAAC,IAAD,CAASzJ,UAAU,wBAAnB,iBACGkF,QADH,IACGA,OADH,EACGA,EAAWpD,KAAI,SAAC4H,GAAD,OACd,cAAC,IAAD,CAAuB1J,UAAU,gEAAjC,SACE,sBAAKA,UAAU,oBAAf,UACE,qBAAKA,UAAU,MAAf,SACE,sBAAMyD,EAAE,otCAEV,mBAAGzD,UAAU,UAAb,SACG0J,EAAS9H,WANN8H,EAASnG,OAWrB,wBAAQvD,UAAU,4HAChBa,QAAS,SAACV,GAAD,OAAOmJ,EAAY,iBAD9B,kBAdI,OAoBLpE,QApBK,IAoBLA,OApBK,EAoBLA,EAAWpD,KAAI,SAAC4H,GAAD,OACd,cAAC,IAAD,CAA4BC,kBAAkB,iBAA9C,SACE,cAAC,EAAD,CAAcD,SAAUA,EAAUP,YAAY,qBAAqBnJ,UAAU,qDADhE0J,EAASnG,WC8CxBqG,EAAwB,CAC5B7J,QAAS8J,aAAO,SAACtH,EAAOuH,GACtBvH,EAAMwH,WAAN,aACEjJ,KAAM,OACNR,UAAMoE,EACN3D,cAAU2D,GACPoF,MAIPR,YAAaO,aAAO,SAACtH,EAAOX,GAC1BW,EAAM2C,UAAY3C,EAAM2C,UAAU8E,OAAO,CAAEpI,OAAM2B,GAAI6E,cAAMnD,SAAU,QAEvEsE,eAAgBM,aAAO,SAACtH,EAAOkH,GAC7BlH,EAAM4C,iBAAmBsE,KAE3BQ,eAAgBJ,aAAO,SAACtH,EAAOuH,GAC7BvH,EAAM2C,UAAY3C,EAAM2C,UAAUgF,QAAO,SAACR,GAAD,OAAcA,EAASnG,KAAOuG,EAAQvG,SAGjFwE,mBAAoB8B,aAAO,SAACtH,EAAOuH,GAChBvH,EAAM2C,UAAU3C,EAAM4C,kBAE9BF,SAASkF,KAAKL,MAEzBM,sBAAuBP,aAAO,SAACtH,EAAOuH,OAGtC1E,oBAAqByE,aAAO,SAACtH,EAAOuH,GAClCvH,EAAM2C,UAAU3C,EAAM4C,kBAAkBF,SAAW6E,KAIrDO,UAAWR,aAAO,SAACtH,EAAOuH,OAG1BQ,YAAaT,aAAO,SAACtH,EAAOuH,OAI5BjF,UAAWgF,aAAO,SAACtH,EAAOuH,GAAa,IAAD,EACpC,UAAAvH,EAAMC,YAAYoC,YAAlB,SAAwBuF,KAAKL,MAE/BhF,UAAW+E,aAAO,SAACtH,EAAOuH,GACxB,GAAIvH,EAAMC,YAAYoC,KAAM,CAC1B,IAAM6E,EAAQlH,EAAMC,YAAYoC,KAAK2F,WAAU,SAACpH,GAAD,OAASA,EAAIvB,OAASkI,EAAQjD,IAAIjF,QAC3EsD,EAAY3C,EAAM2C,UAAU3C,EAAM4C,kBAExCD,EAAUD,SAAWC,EAAUD,SAASnD,KAAI,SAAC3B,GAAD,OAC1CsF,YAAOtF,IAAiB,QAAXA,EAAET,MAAkBS,EAAEG,KAAK6C,IAAIvB,OAASkI,EAAQjD,IAAIjF,KAAjE,2BACOzB,GADP,IACUG,KAAK,2BAAMH,EAAEG,MAAT,IAAe6C,IAAK2G,EAAQhD,QAAU3G,KAGtD6H,QAAQC,IAAI6B,GAEZvH,EAAMC,YAAYoC,KAAK6E,GAASK,EAAQhD,QAG5C/B,YAAa8E,aAAO,SAACtH,EAAOuH,GAAa,IAAD,EACtCvH,EAAMC,YAAYoC,KAAlB,UAAyBrC,EAAMC,YAAYoC,YAA3C,aAAyB,EAAwBsF,QAAO,SAAC/G,GAAD,OAASA,EAAIvB,OAASkI,EAAQlI,WAGxF4I,cAAeX,aAAO,SAACtH,EAAOuH,OAG9BW,gBAAiBZ,aAAO,SAACtH,EAAOuH,OAIhCnH,eAAgBkH,aAAO,SAACtH,EAAOuH,GAAa,IAAD,EACzCvH,EAAMC,YAAYC,UAAlB,UAA8BF,EAAMC,YAAYC,iBAAhD,aAA8B,EAA6BuH,OAAOF,MAEpEjH,eAAgBgH,aAAO,SAACtH,EAAOuH,GACzBvH,EAAMC,YAAYC,aAKxBM,iBAAkB8G,aAAO,SAACtH,EAAOuH,GAAa,IAAD,EAC3C,UAAAvH,EAAMC,YAAYoC,YAAlB,SAAwBsF,QAAO,SAAC5F,GAAD,OAAcA,EAAS1C,OAASkI,EAAQlI,WAGzE8I,gBAAiBb,aAAO,SAACtH,EAAOuH,OAGhCa,kBAAmBd,aAAO,SAACtH,EAAOuH,OAGlCc,MAAOf,aAAO,SAACtH,EAAOuH,GACpB9B,QAAQ4C,MAAM,4BAA6Bd,MAG7CjC,eAAgBgC,aAAO,SAACtH,GAGtByF,QAAQC,IAAI1F,GAEZ,IAAMsI,EAAS,IAAIC,UAAO,EAAOvI,EAAMC,YAAYoC,KAAMrC,EAAMC,YAAY0C,UAAW3C,EAAMC,YAAYC,WAExGuF,QAAQC,IAAI4C,OAOVE,EAAkB,IAAI1I,WAASC,eAAe,UAAW,oBAoBhD0I,EAlBuB,aACpCjB,WAAY,CAAEjJ,KAAM,QACpBqE,iBAAkB,EAClB0F,YAAQnG,EACRlC,YAAa,CACXyI,QAAS,IACTC,SAAU,GACVzI,UAAW,CAACsI,GACZnG,KAAM,CAAC,IAAIxB,MAAI,QAAS2H,GAAkB,IAAI3H,MAAI,OAAQ2H,GAAkB,IAAI3H,MAAI,SAAU2H,IAC9F7F,UAAW,GACXiG,KAAM,GACNhF,WAAY,IAEdjB,UAAW,CAAC,CAAEtD,KAAM,iBAAkBqD,SAAU,GAAI1B,GAAI6E,iBACrDwB,G,QC1JUwB,EAtCG,WAAO,IAAD,EAChBrB,EAAa1K,GAAc,SAACkD,GAAD,OAAWA,EAAMwH,cAC5ChK,EAAUX,GAAgB,SAACU,GAAD,OAAaA,EAAQC,WAC/CM,EAAa0J,EAAWhJ,SACxB2B,EAAMtD,GAAgB,SAACU,GAAD,OAAuB,OAAVO,QAAU,IAAVA,OAAA,EAAAA,EAAYa,MAAMwB,IAAI5C,KAAYA,EAAQ8K,SAC7EpI,EAAcnD,GAAc,SAACkD,GAAD,OAAWA,EAAMC,eAcnD,OACE,qBAAKxC,UAA+B,aAAV,OAAV+J,QAAU,IAAVA,OAAA,EAAAA,EAAYjJ,MAAqB,SAC7C,qGADJ,SAEE,sBAAKd,UAAU,uCAAf,UACE,sBAAKA,UAAU,+DAAf,UACE,qBAAIA,UAAU,8DAAd,+BAAwF+J,QAAxF,IAAwFA,GAAxF,UAAwFA,EAAYhJ,gBAApG,aAAwF,EAAsBa,KAAKK,YACnH,wBAAQpB,QAAS,kBAAMd,EAAQ,CAAEe,KAAM,UAAWd,UAAU,mGAA5D,kBAKF,qBAAKA,UAAU,MAAf,SAvBe,WACnB,GAAIK,EACF,OAAO,cAAC,IAAD,CAAQgL,cAAehL,EAAW6B,SACvC+B,SAAU,SAAC7B,GACTM,EAAIrC,EAAWG,UAAU4B,IACzBrC,EAAQ,CAAEe,KAAM,OAAQR,UAAMoE,EAAW3D,cAAU2D,KAHhD,SAKJrE,EAAWV,WAAWE,UAAU2C,KAiB9B8I,WCCIC,EApCO,WACpB,IAAMxB,EAAa1K,GAAc,SAACkD,GAAD,OAAWA,EAAMwH,cAE5C1J,GADUjB,GAAgB,SAACU,GAAD,OAAaA,EAAQC,WAClCgK,EAAWhJ,UACxB6B,EAASxD,GAAgB,SAACU,GAAD,OAAuB,OAAVO,QAAU,IAAVA,OAAA,EAAAA,EAAYa,MAAM0B,OAAO9C,KAAYA,EAAQ8K,SACnFpI,EAAcnD,GAAc,SAACkD,GAAD,OAAWA,EAAMC,eAqBnD,OAAIuH,GAAcA,EAAWhJ,UAA+B,WAAnBgJ,EAAWjJ,KAC3C,qBAAKd,UAAU,MAAf,SApBY,WACnB,GAAIK,EAAY,CACd,IAAIC,EAAO,GAQX,OANAqI,OAAOC,OAAP,MAAAD,OAAM,CAAQrI,GAAR,mBAAiBqI,OAAO6C,KAAKzB,EAAWzJ,MAAMwB,KAAI,SAAC2J,GACvD,IAAMrH,EAAQ2F,EAAWzJ,KAAKmL,GAE9B,OAAO,eAAGA,EAAsB,iBAATrH,EAAoBzD,KAAKC,UAAUwD,GAASA,SAG9D,cAAC,IAAD,CAAQiH,cAAe/K,EAC5B2D,SAAU,SAAC7B,GACTQ,EAAO,CAAEiE,IAAKkD,EAAWzJ,KAAMwG,IAAKzG,EAAWG,UAAU4B,MAFtD,SAIJ/B,EAAWV,WAAWE,UAAU2C,MAOlC8I,KAGG,mBAAGtL,UAAU,4CAAb,qECOK0L,EAhCH,WACV,OACE,eAAC,IAAD,CAAexK,MAAOyK,YAAYX,GAAlC,UAEE,cAAC,EAAD,IACA,eAAC,IAAD,CAAWY,MAAM,WAAWC,YAAY,MAAM7L,UAAU,4BAA4B8L,iBAAiB,wFAArG,UACE,eAAC,IAAD,CAAWF,MAAM,aAAaC,YAAY,MAAME,QAAQ,MACtDD,iBAAiB,sFADnB,UAGE,cAAC,EAAD,IAEA,sBAAK9L,UAAU,wEAAf,UACE,sBAAKA,UAAU,kFAAf,UACE,qBAAKA,UAAU,iEAAf,uBAGA,qBAAKA,UAAU,8FAAf,4BAKF,cAAC,EAAD,UAKJ,cAACgM,EAAD,WC9BRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c39327b2.chunk.js","sourcesContent":["import { createTypedHooks } from 'easy-peasy';\nimport { StoreActions, StoreModel } from './Store';\n\nconst typedHooks = createTypedHooks<StoreModel & StoreActions>();\n\nexport const useStoreActions = typedHooks.useStoreActions;\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\nexport const useStoreState = typedHooks.useStoreState;\n","import ConfigData, { componentToType } from '../../data/ConfigData';\nimport { useStoreActions } from '../../state/Hooks';\n\nconst Definition = (props: { data: any, type: ConfigData }) => {\n  const Summary = props.type.components.summary;\n  const inspector = useStoreActions((actions) => actions.inspect);\n\n  return (\n    <button className=\"w-full p-2 cursor-pointer text-white font-semibold bg-circle-blue rounded-md\" draggable=\"true\"\n      onDragStart={(e) => {\n        const type = props.type;\n\n        if (type?.dragTarget) {\n          let configData = props.data;\n\n          if (type.node?.transform) {\n            configData = type.node.transform(configData);\n          }\n\n          e.dataTransfer.setData(type.dragTarget, JSON.stringify({ type: type.node?.type || type.type, data: configData }));\n        }\n      }}\n      onClick={(e) => {\n        inspector({ mode: 'editing', data: props.data, dataType: props.type })\n      }}\n    >\n      <Summary data={props.data} />\n    </button>\n  );\n}\n\nexport default Definition;","\nimport Collapsible from 'react-collapsible';\nimport ConfigData from '../../data/ConfigData';\nimport { useStoreActions, useStoreState } from '../../state/Hooks';\nimport Definition from '../atoms/Definition';\nimport CreateNew from './CreateNew';\n\nexport interface DefintionsProps {\n  type: ConfigData;\n}\n\nconst Defintions = (props: DefintionsProps) => {\n  const getIcon = () => {\n    let iconComponent = props.type.components.icon;\n\n    if (iconComponent) {\n      let Icon = iconComponent;\n\n      return <Icon className=\"ml-1 mr-3 w-8 h-8\" />\n    }\n  }\n\n  const items = useStoreState(props.type.store.get);\n  const inspect = useStoreActions((actions) => actions.inspect)\n\n  return (\n    <div className=\"mb-6\">\n      <Collapsible triggerClassName=\"text-gray-100 text-2xl hover:bg-circle-gray-600 p-2 block bg-circle-gray-800 duration:50 transition-all w-full rounded-lg\"\n        triggerOpenedClassName=\"block text-2xl p-2 text-gray-100 bg-circle-green w-full transition rounded-t-lg\" transitionTime={50} trigger={\n          <div className=\"flex \">\n            {getIcon()}\n            <p className=\"self-center\">\n              {props.type.name.plural}\n            </p>\n          </div>\n        }\n      >\n        {\n          items?.map((item) =>\n            <div className=\"w-full p-2 bg-circle-gray-200\" key={item.name}>\n              <Definition data={item} type={props.type} />\n            </div>)\n        }\n        <div className=\"w-full flex-inline h-15 p-2 rounded-b-lg bg-circle-gray-200 float-left\">\n          <button onClick={() => inspect({ dataType: props.type, mode: 'creating' })} className=\"pl-2 pr-2 rounded-full float-right text-white font-semibold text-xl transition-colors hover:bg-circle-blue-light bg-circle-blue\">\n            +\n          </button>\n        </div>\n      </Collapsible>\n    </div>\n  );\n};\n\nexport default Defintions;","import ConfigData from \"./ConfigData\";\nimport { AbstractExecutor } from \"@circleci/circleci-config-sdk/dist/lib/Components/Executor/Executor\";\nimport ExecutorSummary from \"../components/containers/summaries/ExecutorSummary\";\nimport ExecutorInspector from \"../components/containers/inspector/ExecutorInspector\";\nimport ExecutorIcon from \"../icons/ExecutorIcon\";\nimport { Executor, Job } from \"@circleci/circleci-config-sdk\";\nimport { WorkflowJob } from \"./JobData\";\n\nexport type anyExecutor = Executor.DockerExecutor | Executor.MacOSExecutor | Executor.MachineExecutor | Executor.WindowsExecutor | AbstractExecutor\n\nconst ExecutorData = (): ConfigData<anyExecutor, WorkflowJob> => {\n  return {\n    type: 'executor',\n    name: {\n      singular: \"Executor\",\n      plural: \"Executors\"\n    },\n    defaults: {\n      name: 'New Executor',\n      image: 'cimg/base:latest'\n    },\n    transform: (values) => new Executor.DockerExecutor(values.name, values.image.name || 'cimg/base:latest'),\n    store: {\n      get: (state) => state.definitions.executors,\n      add: (actions) => actions.defineExecutor,\n      update: (actions) => actions.updateExecutor,\n      remove: (actions) => actions.undefineExecutor\n    },\n    dragTarget: 'job',\n    applyToNode: (data, nodeData) => {\n      const oldJob = nodeData.job;\n\n      return { job: new Job(oldJob.name, data, oldJob.steps) }\n    },\n    components: {\n      icon: ExecutorIcon,\n      summary: ExecutorSummary,\n      inspector: ExecutorInspector,\n    }\n  }\n}\n\nexport default ExecutorData();\n","import { IconProps } from \"./IconProps\";\n\nconst ExecutorIcon = (props: IconProps) => (\n    <svg viewBox=\"0 0 96 96\" className={props.className}>\n        <g id=\"Layer_1\" data-name=\"Layer 1\">\n            <path d=\"M85.93,30h-76a6,6,0,0,1-6-6V12a6,6,0,0,1,6-6h76a6,6,0,0,1,6,6V24A6,6,0,0,1,85.93,30Zm-76-20a2,2,0,0,0-2,2V24a2,2,0,0,0,2,2h76a2,2,0,0,0,2-2V12a2,2,0,0,0-2-2Z\" />\n            <path d=\"M85.93,90h-76a6,6,0,0,1-6-6V72a6,6,0,0,1,6-6h76a6,6,0,0,1,6,6V84A6,6,0,0,1,85.93,90Zm-76-20a2,2,0,0,0-2,2V84a2,2,0,0,0,2,2h76a2,2,0,0,0,2-2V72a2,2,0,0,0-2-2Z\" />\n            <path d=\"M85.93,60h-76a6,6,0,0,1-6-6V42a6,6,0,0,1,6-6h76a6,6,0,0,1,6,6V54A6,6,0,0,1,85.93,60Zm-76-20a2,2,0,0,0-2,2V54a2,2,0,0,0,2,2h76a2,2,0,0,0,2-2V42a2,2,0,0,0-2-2Z\" />\n            <circle cx=\"19.93\" cy=\"18\" r=\"4\" />\n            <circle cx=\"19.93\" cy=\"48\" r=\"4\" />\n            <circle cx=\"19.93\" cy=\"78\" r=\"4\" />\n            <path d=\"M77.93,20h-48a2,2,0,0,1,0-4h48a2,2,0,0,1,0,4Z\" />\n            <path d=\"M77.93,50h-48a2,2,0,0,1,0-4h48a2,2,0,0,1,0,4Z\" />\n            <path d=\"M77.93,80h-48a2,2,0,0,1,0-4h48a2,2,0,0,1,0,4Z\" />\n        </g>\n    </svg>\n\n);\n\nexport default ExecutorIcon;","import { AbstractExecutor } from \"@circleci/circleci-config-sdk/dist/lib/Components/Executor/Executor\";\n\nconst ExecutorSummary: React.FunctionComponent<{ data: AbstractExecutor}> = (props) => {\n  return (\n    <div>\n      {props.data.name} {props.data.resourceClass}\n    </div>\n  )\n}\n\nexport default ExecutorSummary;","import { Job } from \"@circleci/circleci-config-sdk\";\nimport { AbstractExecutor } from \"@circleci/circleci-config-sdk/dist/lib/Components/Executor/Executor\";\nimport { FormikValues } from \"formik\";\nimport { ReactElement } from \"react-redux/node_modules/@types/react\";\nimport { DefinitionModel } from \"../../../state/Store\";\n\nconst ExecutorInspector = (definitions: DefinitionModel) => ({\n  values,\n  handleChange,\n  handleBlur,\n  handleSubmit\n}: FormikValues & { data: AbstractExecutor}) => {\n  // const defineJob = useStoreActions((actions) => actions.defineJob)\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"name\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n      />\n      <button type=\"submit\" className=\"p-1 font-bold text-white bg-circle-blue rounded-lg\">\n        Submit\n      </button>\n    </form>\n  )\n}\n\n\nexport default ExecutorInspector;","import { Job } from \"@circleci/circleci-config-sdk\";\nimport { FormikValues } from \"formik\";\nimport { useStoreState } from \"../../../state/Hooks\";\nimport { DefinitionModel } from \"../../../state/Store\";\n\nconst JobInspector = (definitions: DefinitionModel) => ({\n  values,\n  handleChange,\n  handleBlur,\n  handleSubmit\n}: FormikValues & { data: Job }) => {\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"name\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n      />\n      <br />\n      <select\n        name=\"executor\"\n        value={values.executor}\n        onChange={handleChange}\n        onBlur={handleBlur}>\n        <option value={'undefined'} key={'undefined'}>Select Executor</option>\n        {definitions.executors?.map((executor) =>\n          <option value={JSON.stringify(executor)} key={executor.name}>{executor.name}</option>\n        )}\n      </select>\n      <button type=\"submit\" className=\"p-1 font-bold text-white bg-circle-blue rounded-lg\">\n        Save\n      </button>\n    </form>\n  )\n}\n\nexport default JobInspector;","import { IconProps } from \"./IconProps\";\n\nconst JobIcon = (props: IconProps) => (\n    <svg viewBox=\"0 0 24 24\" className={props.className}>\n        <path d=\"M12.458388,3 C17.7284428,3 22,7.25487688 22,12.5009275 C22,17.7469783 17.7286827,22 12.458388,22 C9.24779218,22 6.40748266,20.4195905 4.67890641,17.9975161 L4.51046025,18 C5.52650577,18 6.4784703,17.7267799 7.29630887,17.2500927 C8.5797622,18.6332003 10.4175246,19.5 12.4581919,19.5 C16.3422622,19.5 19.4895397,16.3667214 19.4895397,12.5010252 C19.4895397,8.63532901 16.3417423,5.5 12.4581919,5.5 C10.4182181,5.5 8.58077831,6.36686635 7.29682565,7.75083018 C6.52574446,7.30040157 5.63375878,7.03136434 4.68109466,7.00257493 C6.40892952,4.58026814 9.24869152,3 12.458388,3 Z M12.4596333,9.00000001 C14.4011972,9.00000001 15.9748954,10.5675188 15.9748954,12.5003076 C15.9748954,14.4330964 14.4012513,16 12.4596333,16 C11.2973265,16 10.266758,15.437833 9.62706371,14.5716975 C9.88962048,13.931837 10.0334728,13.2326478 10.0334728,12.5 C10.0334728,11.767055 9.88950371,11.0675956 9.62819064,10.4281361 C10.2669454,9.56228031 11.2974499,9.00000001 12.4596333,9.00000001 Z M4.50987191,10 C5.89718507,10 7.0209205,11.1200937 7.0209205,12.5002929 C7.0209205,13.8804921 5.89718507,15 4.50987191,15 C3.12373543,15 2,13.8804921 2,12.5002929 C2,11.1200937 3.12373543,10 4.50987191,10 Z\" />\n    </svg>\n);\n\nexport default JobIcon;","import { Job } from \"@circleci/circleci-config-sdk\";\nimport JobData from \"../../../data/JobData\";\nimport Definition from \"../../atoms/Definition\";\n\nconst JobSummary: React.FunctionComponent<{ data: Job }> = (props) => {\n  return (\n    <div> \n      {props.data.name} {props.data.executor?.name}\n    </div>\n  )\n}\n\nexport default JobSummary;","import { Job } from \"@circleci/circleci-config-sdk\";\nimport ConfigData from \"./ConfigData\";\nimport JobInspector from \"../components/containers/inspector/JobInspector\";\n// import JobNode, { JobNodeProps } from \"../components/containers/nodes/JobNode\";\nimport JobIcon from \"../icons/JobIcon\";\nimport JobSummary from \"../components/containers/summaries/JobSummary\";\nimport JobNode from \"../components/containers/nodes/JobNode\";\nimport { WorkflowJobParameters } from \"@circleci/circleci-config-sdk/dist/lib/Components/Workflow/Workflow\";\n\nexport interface WorkflowJob {\n  job: Job,\n  parameters?: WorkflowJobParameters\n}\n\nconst JobData = (): ConfigData<Job, WorkflowJob> => {\n  return {\n    type: 'job',\n    name: {\n      singular: \"Job\",\n      plural: \"Jobs\"\n    },\n    defaults: {\n      name: 'New Job',\n      executor: undefined\n    },\n    transform: (values) => {\n      return new Job(values.name, JSON.parse(values.executor), values.steps);\n    },\n    store: {\n      get: (state) => {\n        return state.definitions.jobs;\n      },\n      add: (actions) => actions.defineJob,\n      update: (actions) => actions.updateJob,\n      remove: (actions) => actions.undefineJob,\n    },\n    dragTarget: 'workflow',\n    node: {\n      type: 'job',\n      transform: (data) => {\n        return { job: data }\n      },\n      store: {\n        // get: (state, workflowName) => {\n        //   return ;\n        // },\n        // add: (actions) => actions.workflow\n        // update: (actions, job) => {\n\n        // },\n        // remove: (actions, job) => {\n\n        // }\n      },\n      component: JobNode,\n    },\n    components: {\n      icon: JobIcon,\n      summary: JobSummary,\n      inspector: JobInspector,\n    }\n  }\n}\n\nexport default JobData();\n","import { Handle, Node, Position, addEdge, Connection, NodeProps, isNode, getOutgoers } from 'react-flow-renderer';\nimport Collapsible from 'react-collapsible';\nimport { Job } from '@circleci/circleci-config-sdk';\nimport { useCallback } from 'react-redux/node_modules/@types/react';\nimport { useStoreActions, useStoreState } from '../../../state/Hooks';\nimport { WorkflowJobParameters } from '@circleci/circleci-config-sdk/dist/lib/Components/Workflow/Workflow';\nimport { WorkflowJob } from '../../../data/JobData';\nimport { v4 } from 'uuid';\nimport ConfigData, { componentToType } from '../../../data/ConfigData';\n\nconst JobNode: React.FunctionComponent<NodeProps & { data: WorkflowJob }> = (props) => {\n  const elements = useStoreState((state) => state.workflows[state.selectedWorkflow].elements);\n  const setWorkflowElements = useStoreActions((actions) => actions.setWorkflowElements);\n  const updateJob = useStoreActions((actions) => actions.updateJob);\n\n  const updateWorkflowJob = (workflowJob: WorkflowJob, applyToData: { job?: Job, parameters?: WorkflowJobParameters }) =>\n    elements.map((element) =>\n      isNode(element) && element.data.job.name == workflowJob.job.name ?\n        { ...element, data: { ...workflowJob, ...applyToData } }\n        : element\n    );\n\n  const onConnect = (params: Connection) => {\n    const targetJob = elements.find((element) => element.id === params.target)?.data;\n\n    setWorkflowElements(addEdge({ ...params, animated: true, style: { stroke: '#fff' } },\n      updateWorkflowJob(targetJob, {\n        parameters: {\n          requires: [props.data.job.name]\n        }\n      })));\n  }\n\n  return (\n    <div className=\"p-3 bg-green-600 text-white font-bold rounded-lg\"\n      onDragOver={(e) => {\n        if (e.dataTransfer.types.includes('job')) {\n          e.preventDefault();\n        }\n      }} onDrop={(e) => {\n        if (e.dataTransfer.types.includes('job')) {\n\n          const transfer: { type: string, data: any } = JSON.parse(e.dataTransfer.getData('job'));\n          const type = componentToType(transfer.type)\n\n          if (transfer && type?.applyToNode) {\n            const applyToData = type.applyToNode(transfer.data, props.data);\n\n            if ('job' in applyToData) {\n              updateJob({ old: props.data.job, new: applyToData.job });\n            }\n\n            if ('parameters' in applyToData) {\n              updateWorkflowJob(props.data, applyToData)\n            }\n          }\n        }\n      }} >\n      <Handle type=\"target\"\n        isConnectable={true}\n        onConnect={onConnect}\n        position={Position.Left} style={{ borderRadius: 0 }} />\n      <div className=\"flex-col flex w-full\">\n        {props.data.parameters?.name || props.data.job.name}\n        <p className=\"text-gray-200\">\n          Executor: {props.data.job.executor.name}\n          <br />\n          Parameters: {JSON.stringify(props.data.parameters) || 'None'}\n        </p>\n        {/* <p className=\"font-thin text-sm text-gray-600\">\n          Close\n        </p> */}\n      </div>\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        onConnect={onConnect}\n        isConnectable={true}\n      />\n    </div >\n  )\n}\n\nexport default JobNode;","import { Command, Job, Executor, Pipeline } from \"@circleci/circleci-config-sdk\";\nimport { Action, ActionCreator, Actions, State, StateMapper } from \"easy-peasy\";\nimport { FormikConfig, FormikProps, FormikValues } from \"formik\";\nimport { Elements, FlowElement, NodeProps } from \"react-flow-renderer\";\nimport { ReactElement } from \"react-redux/node_modules/@types/react\";\nimport Store, { DefinitionModel, UpdateType } from \"../state/Store\";\nimport ExecutorData from \"./ExecutorData\";\nimport JobData from \"./JobData\";\n\nexport interface DataMapping {\n  type: string;\n  component: any[];\n  dataType: ConfigData;\n}\n\nconst dataMappings: DataMapping[] = [\n  {\n    type: 'executor',\n    component: [Executor.DockerExecutor, Executor.MacOSExecutor, Executor.MachineExecutor, Executor.WindowsExecutor],\n    dataType: ExecutorData\n  },\n  {\n    type: 'job',\n    component: [Job],\n    dataType: JobData\n  },\n];\n\nconst componentToType = (data: any): ConfigData | undefined => {\n  let foundType = undefined;\n\n  dataMappings.forEach((mapping) => {\n    if (typeof data === 'string' && mapping.type == data) {\n      foundType = mapping.dataType;\n      return;\n    } else {\n      mapping.component.forEach(type => {\n        if (data instanceof type) {\n          foundType = mapping.dataType;\n          return;\n        }\n      });\n    }\n  })\n\n  return foundType;\n}\n\nexport { componentToType, dataMappings };\n\ntype storeType = typeof Store;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\ntype ToNode<T> = { [K in KeysOfUnion<T>]: keyof T }\n\nexport default interface ConfigData<ConfigDataType = any, ConfigNodeProps = any> {\n  type: string,\n  name: {\n    singular: string;\n    plural: string;\n  },\n  defaults: {\n    [K in KeysOfUnion<ConfigDataType>]?: any;\n  },\n  transform: (values: { [K in KeysOfUnion<ConfigDataType>]: any }) => ConfigDataType;\n  store: {\n    get: (state: State<storeType>) => ConfigDataType[] | undefined;\n    add: (state: Actions<storeType>) => ActionCreator<ConfigDataType>;\n    update: (state: Actions<storeType>) => (data: UpdateType<ConfigDataType>) => void;\n    remove: (state: Actions<storeType>) => (data: ConfigDataType) => void;\n  },\n  dragTarget?: string,\n  applyToNode?: (data: ConfigDataType, nodeData: ConfigNodeProps) => { [K in KeysOfUnion<ConfigNodeProps>]?: any }\n  node?: {\n    type: string,\n    transform?: (data: ConfigDataType) => ConfigNodeProps\n    store: {\n      // get: (state: State<storeType>, workflowName: string) => FlowElement<ConfigNodeProps> | undefined;\n      // add: (state: Actions<storeType>) => ActionCreator<ConfigNodeProps>;\n      // update: (state: Actions<storeType>) => (data: ConfigNodeProps) => void;\n      // remove:  (state: Actions<storeType>) => (data: ConfigNodeProps) => void;\n    },\n    component: React.FunctionComponent<{ data: ConfigNodeProps } & NodeProps>\n  }\n  components: {\n    icon?: React.FunctionComponent<any>;\n    summary: React.FunctionComponent<{ data: ConfigDataType }>;\n\n    inspector: (definitions: DefinitionModel) => (props: FormikValues & { data: ConfigDataType }) => JSX.Element;\n  }\n}","import Definitions from \"../containers/DefinitionsContainer\";\nimport { useStoreActions, useStoreState } from \"../../state/Hooks\";\nimport { dataMappings } from \"../../data/ConfigData\";\n\nconst DefintionsPane = () => {\n  /* TODO: DETERMINE PARAMETERS\n  const parameters = useStoreState((state) => state.parameters); \n  const defineParameter = useStoreActions((actions) => actions.defineParameter); */\n  const generateConfig = useStoreActions((actions) => actions.generateConfig);\n\n  return (\n    <div className=\"h-full w-full pt-6 bg-circle-gray-900 flex flex-col\">\n      <div className=\"flex border-b border-circle-gray-800\">\n        <h1 className=\"border-b-4 text-xl pl-4 pr-4 pb-2 w-max font-bold text-white text-center border-circle-green\">\n          CONFIG DEFINITIONS\n        </h1>\n      </div>\n\n      <div className=\"flex-1 h-full flex-col p-10 \">\n        <div className=\"overflow-y-auto h-full mb-6 rounded-lg\">\n          {dataMappings.map(mapping => {\n            const dataType = mapping.dataType;\n\n            return (<Definitions type={dataType} />)\n          })}\n        </div>\n      </div>\n\n      <button className=\"text-gray-100 text-2xl p-2 m-6 bg-circle-green duration:50 transition-all rounded-lg\"\n        onClick={e => generateConfig()}>\n        Generate config.yml\n      </button>\n    </div>)\n}\n\nexport default DefintionsPane;","import { Job } from '@circleci/circleci-config-sdk';\nimport React, { useState } from 'react';\nimport ReactFlow, { Background, BackgroundVariant, Elements, Node, NodeTypesType } from 'react-flow-renderer';\nimport { v4 } from 'uuid';\nimport dataTypes, { componentToType, dataMappings } from '../../data/ConfigData';\nimport JobData from '../../data/JobData';\nimport { useStoreActions, useStoreState } from '../../state/Hooks';\nimport Store, { WorkflowModel } from '../../state/Store';\nimport JobNode from '../containers/nodes/JobNode';\n\nexport interface ElementProps {\n  className?: string;\n  bgClassName?: string;\n  workflow: WorkflowModel\n}\n\n\nconst getTypes = (): NodeTypesType => Object.assign({}, ...dataMappings.map((component) => {\n  const node = component.dataType.node;\n\n  if (node) {\n    return { [node.type]: node.component }\n  }\n}))\n\nconst WorkflowPane = (props: ElementProps) => {\n  const elements = useStoreState((state) => state.workflows[state.selectedWorkflow].elements);\n  const addWorkflowElement = useStoreActions((actions) => actions.addWorkflowElement);\n\n  return (\n    <div className=\"w-full h-full\" onDragOver={(e) => {\n      if (e.dataTransfer.types.includes('workflow')) {\n        e.preventDefault();\n      }\n    }} onDrop={(e) => {\n\n      if (e.dataTransfer.types.includes('workflow')) {\n        const transfer = JSON.parse(e.dataTransfer.getData('workflow'));\n\n        console.log(transfer)\n\n        if (transfer) {\n          const workflowNode: Node<any> = {\n            data: transfer.data,\n            connectable: true,\n            type: transfer.type,\n            id: v4(),\n            position: { x: e.clientX, y: e.clientY },\n          }\n\n          addWorkflowElement(workflowNode);\n        }\n      }\n    }}>\n      <ReactFlow elements={elements} className={props.className} selectNodesOnDrag={false} nodeTypes={getTypes()} snapToGrid={true}\n      >\n        <Background variant={BackgroundVariant.Lines} gap={150} color=\"#000000\" className={props.bgClassName} size={1}\n        />\n      </ReactFlow >\n    </div>\n  );\n};\n\nexport default WorkflowPane;","import { useStoreActions, useStoreState } from \"../../state/Hooks\";\nimport { Tab, TabList, TabPanel, Tabs } from \"react-tabs\";\nimport WorkflowPane from \"./WorkflowPane\";\n\n\nconst WorkflowsTabbed = () => {\n  const workflows = useStoreState((state) => state.workflows);\n  const addWorkflow = useStoreActions((actions) => actions.addWorkflow);\n  const selectWorkflow = useStoreActions((actions) => actions.selectWorkflow);\n\n  return (<Tabs className=\"w-full h-full flex flex-col bg-white\" onSelect={(index) => selectWorkflow(index)} >\n    <TabList className=\"inline-flex pl-2 pt-2\">\n      {workflows?.map((workflow) =>\n        <Tab key={workflow.id} className=\"bg-circle-gray-200 w-max rounded-t-lg p-2 mr-2 cursor-pointer\">\n          <div className=\"flex flex-row h-5\">\n            <svg className=\"w-8\">\n              <path d=\"M13,12.0005 L13,14.5005 C13,15.8812153 14.1192847,17.0005 15.5,17.0005 C16.7716732,17.0005 17.8215783,16.0510253 17.9794794,14.8223119 C16.8252603,14.4045443 16,13.2985065 16,12.0005 C16,10.3434832 17.3434471,9.0005 19,9.0005 C20.6565529,9.0005 22,10.3434832 22,12.0005 C22,13.3107265 21.1591278,14.4253528 19.9878345,14.8339277 C19.8172144,17.1635097 17.8731367,19.0005 15.5,19.0005 C13.0147153,19.0005 11,16.9857847 11,14.5005 L11,12.0005 L11,9.4995 C11,8.11906389 9.88099443,7.0005 8.5,7.0005 C7.2278041,7.0005 6.17794274,7.94975945 6.020417,9.17853139 C7.17480406,9.5960731 8,10.7018409 8,12.0005 C8,13.6567847 6.65628475,15.0005 5,15.0005 C3.34371525,15.0005 2,13.6567847 2,12.0005 C2,10.6896797 2.84072326,9.57538027 4.01209968,9.16698275 C4.18228055,6.83714058 6.12646259,5.0005 8.5,5.0005 C10.9853872,5.0005 13,7.0143176 13,9.4995 L13,12.0005 Z M6,12.0005 C6,11.4482074 5.55213797,11.0005 5,11.0005 C4.44786203,11.0005 4,11.4482074 4,12.0005 C4,12.5522153 4.44828475,13.0005 5,13.0005 C5.55171525,13.0005 6,12.5522153 6,12.0005 Z M20,12.0005 C20,11.4482074 19.552138,11.0005 19,11.0005 C18.447862,11.0005 18,11.4482074 18,12.0005 C18,12.5522153 18.4482847,13.0005 19,13.0005 C19.5517153,13.0005 20,12.5522153 20,12.0005 Z\"></path>\n            </svg>\n            <p className=\"text-lg\">\n              {workflow.name}\n            </p>\n          </div>\n        </Tab>\n      )}\n      <button className=\"bg-circle-blue transition-colors hover:bg-circle-blue-light text-white w-10 text-2xl rounded-t-lg p-1 mr-2 cursor-pointer\"\n        onClick={(e) => addWorkflow('new-workflow')}>\n        +\n      </button>\n    </TabList>\n\n    {workflows?.map((workflow) =>\n      <TabPanel key={workflow.id} selectedClassName=\"flex-grow mr-4\">\n        <WorkflowPane workflow={workflow} bgClassName=\"bg-circle-gray-800\" className=\"ml-2 border-2 border-b-0 border-circle-gray-400\" />\n      </TabPanel>\n    )}\n  </Tabs>)\n}\n\nexport default WorkflowsTabbed;","import { Config, Executor, Job, Workflow } from '@circleci/circleci-config-sdk';\nimport { Command } from '@circleci/circleci-config-sdk/dist/lib/Components/Commands/Command';\nimport { DockerExecutor } from '@circleci/circleci-config-sdk/dist/lib/Components/Executor';\nimport { AbstractExecutor } from '@circleci/circleci-config-sdk/dist/lib/Components/Executor/Executor';\nimport { WorkflowJob } from '@circleci/circleci-config-sdk/dist/lib/Components/Workflow/WorkflowJob';\nimport { CircleCIConfigObject, ConfigOrbImport } from '@circleci/circleci-config-sdk/dist/lib/Config';\nimport { ParameterTypes } from '@circleci/circleci-config-sdk/dist/lib/Config/Parameters';\nimport { PipelineParameter } from '@circleci/circleci-config-sdk/dist/lib/Config/Pipeline';\nimport { Action, action } from 'easy-peasy';\nimport { Edge, Elements, FlowElement, getIncomers, getOutgoers, isEdge, isNode, Node, updateEdge } from 'react-flow-renderer';\nimport { v4 } from 'uuid';\nimport JobNode from '../components/containers/nodes/JobNode'\nimport ConfigData from '../data/ConfigData';\n\nexport interface WorkflowModel {\n  name: string\n  id: string\n  elements: Elements<any>\n}\n\nexport interface DefinitionModel extends CircleCIConfigObject {\n  orbs: ConfigOrbImport[];\n  parameters: PipelineParameter<ParameterTypes>[];\n}\n\nexport interface InspectModel {\n  data?: any;\n  dataType?: ConfigData | undefined;\n  mode: 'creating' | 'editing' | 'none';\n}\n\nexport interface StoreModel {\n  config: Config | undefined;\n  definitions: DefinitionModel;\n  workflows: WorkflowModel[];\n  inspecting: InspectModel;\n  selectedWorkflow: number;\n}\n\nexport interface UpdateType<T> {\n  old: T\n  new: T\n}\n\nexport interface StoreActions {\n  inspect: Action<StoreModel, InspectModel | undefined>;\n\n  addWorkflow: Action<StoreModel, string>;\n  selectWorkflow: Action<StoreModel, number>;\n  removeWorkflow: Action<StoreModel, WorkflowModel>;\n\n  addWorkflowElement: Action<StoreModel, FlowElement<any>>;\n  removeWorkflowElement: Action<StoreModel, FlowElement<any>>;\n  setWorkflowElements: Action<StoreModel, Elements<any>>\n\n  // config/declarations\n  importOrb: Action<StoreModel, ConfigOrbImport>;\n  unimportOrb: Action<StoreModel, ConfigOrbImport>;\n\n  defineJob: Action<StoreModel, Job>;\n  updateJob: Action<StoreModel, UpdateType<Job>>;\n  undefineJob: Action<StoreModel, Job>;\n\n  defineCommand: Action<StoreModel, Command>;\n  undefineCommand: Action<StoreModel, Command>;\n\n  defineExecutor: Action<StoreModel, AbstractExecutor>;\n  updateExecutor: Action<StoreModel, UpdateType<AbstractExecutor>>;\n  undefineExecutor: Action<StoreModel, AbstractExecutor>;\n\n  defineParameter: Action<StoreModel, PipelineParameter<ParameterTypes>>;\n  undefineParameter: Action<StoreModel, PipelineParameter<ParameterTypes>>;\n\n  generateConfig: Action<StoreModel>;\n  error: Action<StoreModel, any>;\n}\n\nconst Actions: StoreActions = {\n  inspect: action((state, payload) => {\n    state.inspecting = {\n      mode: 'none',\n      data: undefined,\n      dataType: undefined,\n      ...payload,\n    };\n  }),\n\n  addWorkflow: action((state, name) => {\n    state.workflows = state.workflows.concat({ name, id: v4(), elements: [] });\n  }),\n  selectWorkflow: action((state, index) => {\n    state.selectedWorkflow = index;\n  }),\n  removeWorkflow: action((state, payload) => {\n    state.workflows = state.workflows.filter((workflow) => workflow.id !== payload.id)\n  }),\n\n  addWorkflowElement: action((state, payload) => {\n    const workflow = state.workflows[state.selectedWorkflow];\n\n    workflow.elements.push(payload);\n  }),\n  removeWorkflowElement: action((state, payload) => {\n\n  }),\n  setWorkflowElements: action((state, payload) => {\n    state.workflows[state.selectedWorkflow].elements = payload;\n  }),\n  // config/declarations\n\n  importOrb: action((state, payload) => {\n\n  }),\n  unimportOrb: action((state, payload) => {\n\n  }),\n\n  defineJob: action((state, payload) => {\n    state.definitions.jobs?.push(payload);\n  }),\n  updateJob: action((state, payload) => {\n    if (state.definitions.jobs) {\n      const index = state.definitions.jobs.findIndex((job) => job.name === payload.old.name)\n      const workflows = state.workflows[state.selectedWorkflow];\n\n      workflows.elements = workflows.elements.map((e) =>\n        isNode(e) && e.type === 'job' && e.data.job.name === payload.old.name ?\n          { ...e, data: { ...e.data, job: payload.new } } : e\n      );\n\n      console.log(payload)\n\n      state.definitions.jobs[index] = payload.new; // mutating, should this be changed? it works \n    }\n  }),\n  undefineJob: action((state, payload) => {\n    state.definitions.jobs = state.definitions.jobs?.filter((job) => job.name === payload.name)\n  }),\n\n  defineCommand: action((state, payload) => {\n\n  }),\n  undefineCommand: action((state, payload) => {\n\n  }),\n\n  defineExecutor: action((state, payload) => {\n    state.definitions.executors = state.definitions.executors?.concat(payload);\n  }),\n  updateExecutor: action((state, payload) => {\n    if (state.definitions.executors) {\n      // const index = state.definitions.executors.findIndex((executor) => executor.name === payload.name)\n      // state.definitions.executors[index] = payload;\n    }\n  }),\n  undefineExecutor: action((state, payload) => {\n    state.definitions.jobs?.filter((executor) => executor.name !== payload.name)\n  }),\n\n  defineParameter: action((state, payload) => {\n\n  }),\n  undefineParameter: action((state, payload) => {\n  }),\n\n  error: action((state, payload) => {\n    console.error('An action was not found! ', payload)\n  }),\n\n  generateConfig: action((state) => {\n    // const defs = state.definitions;\n\n    console.log(state)\n\n    const config = new Config(false, state.definitions.jobs, state.definitions.workflows, state.definitions.executors);\n\n    console.log(config)\n\n    //     console.log(state.config)\n    // console.log(state.config.stringify())\n  }),\n}\n\nconst defaultExecutor = new Executor.DockerExecutor('default', 'cimg/base:stable')\n\nconst Store: StoreModel & StoreActions = {\n  inspecting: { mode: 'none' },\n  selectedWorkflow: 0,\n  config: undefined,\n  definitions: {\n    version: 2.1,\n    commands: [],\n    executors: [defaultExecutor],\n    jobs: [new Job('build', defaultExecutor), new Job('test', defaultExecutor), new Job('deploy', defaultExecutor)],\n    workflows: [],\n    orbs: [],\n    parameters: []\n  },\n  workflows: [{ name: 'build-and-test', elements: [], id: v4() }],\n  ...Actions\n}\n\n\nexport default Store;","import { Formik } from \"formik\";\nimport { useStoreActions, useStoreState } from \"../../state/Hooks\";\n\nexport interface CreateNewProps {\n  inspector: React.FunctionComponent\n}\n\nconst CreateNew = () => {\n  const inspecting = useStoreState((state) => state.inspecting);\n  const inspect = useStoreActions((actions) => actions.inspect)\n  const configData = inspecting.dataType;\n  const add = useStoreActions((actions) => configData?.store.add(actions) || actions.error);\n  const definitions = useStoreState((state) => state.definitions)\n\n  const getInspector = () => {\n    if (configData) {\n      return <Formik initialValues={configData.defaults}\n        onSubmit={(values) => {\n          add(configData.transform(values))\n          inspect({ mode: 'none', data: undefined, dataType: undefined })\n        }}>\n        {configData.components.inspector(definitions)}\n      </Formik>\n    }\n  }\n\n  return (\n    <div className={inspecting?.mode != 'creating' ? 'hidden' : ''\n      + 'absolute w-full h-full flex items-center justify-center bg-opacity-75 bg-black z-50 transition-all'}>\n      <div className=\"bg-circle-gray-100 rounded-lg w-max \">\n        <div className=\"w-full h-14 bg-circle-green rounded-t-lg float-left p-2 mb-2\">\n          <h1 className=\"float-left ml-2 mt-1 text-white font-semibold text-2xl mr-4\">Create New {inspecting?.dataType?.name.singular}</h1>\n          <button onClick={() => inspect({ mode: 'none' })} className=\"pl-2 mt-1 pr-2 rounded-full float-right text-none text-2xl transition-colors hover:bg-circle-red\">\n            X\n          </button>\n        </div>\n\n        <div className=\"p-3\">\n          {getInspector()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CreateNew;","import { Formik } from \"formik\";\nimport { useStoreActions, useStoreState } from \"../../state/Hooks\";\n\nconst InspectorPane = () => {\n  const inspecting = useStoreState((state) => state.inspecting);\n  const inspect = useStoreActions((actions) => actions.inspect);\n  const configData = inspecting.dataType;\n  const update = useStoreActions((actions) => configData?.store.update(actions) || actions.error);\n  const definitions = useStoreState((state) => state.definitions)\n\n  const getInspector = () => {\n    if (configData) {\n      let data = {}\n\n      Object.assign(data, ...Object.keys(inspecting.data).map((key) => {\n        const value = inspecting.data[key];\n\n        return { [key]: typeof value == 'object' ? JSON.stringify(value) : value }\n      }));\n\n      return <Formik initialValues={data}\n        onSubmit={(values) => {\n          update({ old: inspecting.data, new: configData.transform(values) })\n        }}>\n        {configData.components.inspector(definitions)}\n      </Formik>\n    }\n  }\n\n  if (inspecting && inspecting.dataType && inspecting.mode == 'editing') {\n    return <div className=\"p-5\">\n      {getInspector()}\n    </div>\n  }\n  return (<p className=\"text-circle-green-light font-semibold p-5\">\n    Select a defintion or node to view and edit properties\n  </p>)\n}\n\nexport default InspectorPane;","import SplitPane from 'react-split-pane';\nimport DefinitionsPane from './components/panes/DefinitionsPane'\nimport WorkflowsTabbed from './components/panes/WorkflowsTabbed';\nimport { createStore, StoreProvider } from 'easy-peasy';\nimport Store from './state/Store';\nimport CreateNew from './components/containers/CreateNew';\nimport { useStoreActions, useStoreState } from './state/Hooks';\nimport InspectorPane from './components/panes/InspectorPane';\n\nconst App = () => {\n  return (\n    <StoreProvider store={createStore(Store)} >\n\n      <CreateNew />\n      <SplitPane split=\"vertical\" defaultSize=\"75%\" className=\"bounds bg-circle-gray-700\" resizerClassName=\"z-0 w-0.5 h-full transition duration-500  hover:bg-circle-blue-light cursor-ew-resize\">\n        <SplitPane split=\"horizontal\" defaultSize=\"70%\" minSize=\"20%\"\n          resizerClassName=\"h-0.5  flex-col cursor-ns-resize transition duration-500 hover:bg-circle-blue-light\">\n\n          <WorkflowsTabbed />\n\n          <div className='bg-circle-gray-900 w-full h-full border-r-2 border-circle-green-light'>\n            <div className=\"inline-flex border-b text-xl  pt-4 pb-0 border-circle-gray-800 w-full font-bold\">\n              <div className=\"border-b-4 pl-4 pr-4 pb-2 w-max text-white border-circle-green\">\n                INSPECTOR\n              </div>\n              <div className=\"pl-4 pr-4 pb-2 w-max text-circle-gray-500 hover:text-white transition-colors cursor-pointer\">\n                CODE EDITOR\n              </div>\n            </div>\n\n            <InspectorPane />\n\n          </div>\n        </SplitPane>\n\n        <DefinitionsPane />\n      </SplitPane >\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}